// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: twobody_parameters.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTwoBodyRun = `-- name: CreateTwoBodyRun :one
INSERT INTO twobody_parameters (temperature, density, version, runID, note, created_at, updated_at)
VALUES(
       $1,
       $2,
       $3,
       $4,
       $5,
       $6,
       $7
      ) RETURNING temperature, density, version, runid, note, created_at, updated_at
`

type CreateTwoBodyRunParams struct {
	Temperature float64
	Density     float64
	Version     string
	Runid       pgtype.UUID
	Note        pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateTwoBodyRun(ctx context.Context, arg CreateTwoBodyRunParams) (TwobodyParameter, error) {
	row := q.db.QueryRow(ctx, createTwoBodyRun,
		arg.Temperature,
		arg.Density,
		arg.Version,
		arg.Runid,
		arg.Note,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i TwobodyParameter
	err := row.Scan(
		&i.Temperature,
		&i.Density,
		&i.Version,
		&i.Runid,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeRunByID = `-- name: RemoveRunByID :one
DELETE FROM twobody_parameters
WHERE runID = $1
RETURNING temperature, density, version, runid, note, created_at, updated_at
`

func (q *Queries) RemoveRunByID(ctx context.Context, runid pgtype.UUID) (TwobodyParameter, error) {
	row := q.db.QueryRow(ctx, removeRunByID, runid)
	var i TwobodyParameter
	err := row.Scan(
		&i.Temperature,
		&i.Density,
		&i.Version,
		&i.Runid,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const wipeTwoBodyTable = `-- name: WipeTwoBodyTable :exec
DELETE FROM twobody_parameters
`

func (q *Queries) WipeTwoBodyTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, wipeTwoBodyTable)
	return err
}
